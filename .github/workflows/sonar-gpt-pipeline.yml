name: Fullstack Security Analysis with SonarQube + GPT-4

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarQube Scan
      run: |
        dotnet sonarscanner begin \
          /k:"eshop-web-dotnet8" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
          /d:sonar.verbose=true \
          /d:sonar.exclusions="**/obj/**,**/bin/**,**/*.json,**/BlazorAdmin/**"

    - name: Clean, Restore and Build
      run: |
        dotnet clean eShopOnWeb.sln
        dotnet restore eShopOnWeb.sln
        dotnet build eShopOnWeb.sln --no-incremental

    - name: End SonarQube Scan
      run: |
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Wait for SonarQube to finalize
      run: sleep 15

    - name: Download SonarQube Issues
      run: |
        curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=eshop-web-dotnet8" \
          -o sonar-report.json

    - name: Combine GPT Prompt with Report (safe for jq 1.5)
      run: |
        REPORT=$(cat sonar-report.json | jq -c .)
        echo "{\"prompt\": \"You are a senior security analyst. Analyze this SonarQube issue report. Group similar issues, reduce false positives, highlight critical risks, and provide remediation advice in markdown format.\", \"report\": $REPORT}" > gpt-payload.json

    - name: Call GPT-4 and Save Summary
      run: |
        echo "Calling GPT-4 to analyze SonarQube report..."
        RESPONSE=$(curl -s -X POST "${{ secrets.GPT_FUNCTION_ENDPOINT }}" \
          -H "Content-Type: application/json" \
          --data-binary @gpt-payload.json)
        if [ -z "$RESPONSE" ]; then
          echo "Error: No response from GPT-4 API."
          exit 1
        fi
        echo "$RESPONSE" > gpt-summary.md
        cat gpt-summary.md

    - name: Check if GPT-4 Summary Exists
      run: |
        if [ ! -f gpt-summary.md ]; then
          echo "Error: gpt-summary.md not found!"
          exit 1
        else
          echo "gpt-summary.md found."
        fi

    - name: Upload GPT-4 Summary as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: gpt4-summary
        path: gpt-summary.md
