# Security Analysis Pipeline with SonarQube + GPT-4 + Azure Blob Upload
name: Fullstack Security Analysis with SonarQube

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Install SonarScanner and jq
        run: |
          dotnet tool install --global dotnet-sonarscanner
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Begin SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin \
            /k:"eshop" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.host.url="${SONAR_HOST_URL}" \
            /d:sonar.report.export.path=sonar-report.json \
            /d:sonar.verbose=true \
            /d:sonar.exclusions="**/obj/**,**/bin/**,**/*.json,**/BlazorAdmin/**,infra/core/database/sqlserver/**,infra/core/security/keyvault.bicep,infra/core/host/appservice.bicep"

      - name: Clean, Restore and Build
        run: |
          # Explicitly specify solution file to avoid "more than one project" error
          dotnet clean eShopOnWeb.sln
          dotnet restore eShopOnWeb.sln
          dotnet build eShopOnWeb.sln --no-incremental

      - name: End SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

      - name: Wait for SonarQube to finalize
        run: sleep 60

      - name: Download SonarQube Issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="eshop"
          AUTH_HEADER="Authorization: Basic $(echo -n "${SONAR_TOKEN}:" | base64)"
          HTTP_STATUS=$(curl -s -o sonar-report.json -w "%{http_code}" -H "$AUTH_HEADER" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&ps=500")
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "ERROR: SonarQube API returned HTTP status $HTTP_STATUS"
            cat sonar-report.json
            exit 1
          fi

      - name: Verify SonarQube Report Content
        run: |
          if [ ! -s sonar-report.json ] || ! jq empty sonar-report.json > /dev/null 2>&1; then
            echo "WARNING: SonarQube report is empty or not valid JSON"
            echo '{"issues":[],"components":[],"total":0}' > sonar-report.json
            echo "Created empty report template"
          fi
          
          # Log report information for diagnostics
          ISSUE_COUNT=$(jq '.issues | length' sonar-report.json)
          COMPONENT_COUNT=$(jq '.components | length' sonar-report.json)
          TOTAL_COUNT=$(jq '.total' sonar-report.json)
          echo "SonarQube report contains: $ISSUE_COUNT issues, $COMPONENT_COUNT components, $TOTAL_COUNT total reported issues"
          
          # Check for empty/incomplete report
          if [ "$ISSUE_COUNT" -eq 0 ]; then
            echo "WARNING: No issues found in SonarQube report. This might cause problems with the GPT analysis."
          fi

      - name: Upload SonarQube Raw Report to Azure Blob
        env:
          DOTNET_ROOT: /usr/share/dotnet
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FOLDER_DATE=$(date +%Y%m%d)

          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)

          # Create beautified version of sonar-report.json
          BEAUTIFIED="sonar-report-${TIMESTAMP}.json"
          jq '.' sonar-report.json > "$BEAUTIFIED"

          # Create reduced version for GPT
          REDUCED="reduced-sonar-report-${TIMESTAMP}.json"
          jq '{issues: [.issues[] | {file: .component, message: .message, severity: .severity, rule: .rule}]}' "$BEAUTIFIED" > "$REDUCED"

          # Upload both files to Azure Blob
          for FILE in "$BEAUTIFIED" "$REDUCED"; do
            curl -s -S -f -X PUT "${BASE_URL}/${FILE}?${SAS_TOKEN}" \
              -H "x-ms-blob-type: BlockBlob" \
              -H "x-ms-version: 2021-10-04" \
              --data-binary @"$FILE"
          done

          mkdir -p "report/${FOLDER_DATE}"
          cp "$BEAUTIFIED" "report/${FOLDER_DATE}/"
          cp "$REDUCED" "report/${FOLDER_DATE}/"
          echo "Reports saved to report/${FOLDER_DATE}/"

      - name: Summarize SonarQube Issues via GPT-4 on Azure Function
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
          AZURE_BLOB_SAS_TOKEN: ${{ secrets.AZURE_BLOB_SAS_TOKEN }}
          AZURE_FUNCTION_URL: ${{ secrets.AZURE_FUNCTION_URL }}
          AZURE_FUNCTION_KEY: ${{ secrets.AZURE_FUNCTION_KEY }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          REDUCED="reduced-sonar-report-${TIMESTAMP}.json"
          
          # Download reduced report from blob
          curl -o "$REDUCED" "${AZURE_BLOB_SAS_URL}/${REDUCED}"

          # Call Azure Function
          RESPONSE=$(curl -s -X POST "$AZURE_FUNCTION_URL" \
            -H "Content-Type: application/json" \
            --data-binary "@$REDUCED")

          echo "$RESPONSE" > gpt-summary-${TIMESTAMP}.md

          # Upload the summary back to Azure Blob (optional)
          curl -s -S -f -X PUT "${AZURE_BLOB_SAS_URL}/gpt-summary-${TIMESTAMP}.md?${AZURE_BLOB_SAS_TOKEN}" \
            -H "x-ms-blob-type: BlockBlob" \
            -H "x-ms-version: 2021-10-04" \
            --data-binary "@gpt-summary-${TIMESTAMP}.md"


    