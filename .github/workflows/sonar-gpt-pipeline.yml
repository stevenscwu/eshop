# Security Analysis Pipeline with SonarQube + GPT-4 + Azure Blob Upload
name: Fullstack Security Analysis with SonarQube

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Install SonarScanner and jq
        run: |
          dotnet tool install --global dotnet-sonarscanner
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Begin SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin \
            /k:"eshop" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.host.url="${SONAR_HOST_URL}" \
            /d:sonar.verbose=true \
            /d:sonar.exclusions="**/obj/**,**/bin/**,**/*.json,**/BlazorAdmin/**,infra/core/database/sqlserver/**,infra/core/security/keyvault.bicep,infra/core/host/appservice.bicep"

      - name: Clean, Restore and Build
        run: |
          # Explicitly specify solution file to avoid "more than one project" error
          dotnet clean eShopOnWeb.sln
          dotnet restore eShopOnWeb.sln
          dotnet build eShopOnWeb.sln --no-incremental

      - name: End SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

      - name: Wait for SonarQube to finalize
        run: sleep 60

      - name: Download SonarQube Issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="eshop"
          AUTH_HEADER="Authorization: Basic $(echo -n "${SONAR_TOKEN}:" | base64)"
          HTTP_STATUS=$(curl -s -o sonar-report.json -w "%{http_code}" -H "$AUTH_HEADER" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&ps=500")
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "ERROR: SonarQube API returned HTTP status $HTTP_STATUS"
            cat sonar-report.json
            exit 1
          fi

      - name: Verify SonarQube Report Content
        run: |
          if [ ! -s sonar-report.json ] || ! jq empty sonar-report.json > /dev/null 2>&1; then
            echo "WARNING: SonarQube report is empty or not valid JSON"
            echo '{"issues":[],"components":[],"total":0}' > sonar-report.json
            echo "Created empty report template"
          fi
          
          # Log report information for diagnostics
          ISSUE_COUNT=$(jq '.issues | length' sonar-report.json)
          COMPONENT_COUNT=$(jq '.components | length' sonar-report.json)
          TOTAL_COUNT=$(jq '.total' sonar-report.json)
          echo "SonarQube report contains: $ISSUE_COUNT issues, $COMPONENT_COUNT components, $TOTAL_COUNT total reported issues"
          
          # Check for empty/incomplete report
          if [ "$ISSUE_COUNT" -eq 0 ]; then
            echo "WARNING: No issues found in SonarQube report. This might cause problems with the GPT analysis."
          fi

      - name: Upload SonarQube Raw Report to Azure Blob
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
        run: |
          jq '.' sonar-report.json > sonar-report-pretty.json
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="sonar-report-${TIMESTAMP}.json"
          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)
          FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
          curl -s -S -f -X PUT "$FULL_URL" -H "x-ms-blob-type: BlockBlob" --data-binary @sonar-report-pretty.json
          
          FOLDER_DATE=$(date +%Y%m%d)
          mkdir -p "report/${FOLDER_DATE}"                  
          cp sonar-report-pretty.json "report/${FOLDER_DATE}/${FILENAME}"
          echo "SonarQube report saved to report/${FOLDER_DATE}/${FILENAME}"      - name: Minify SonarQube JSON Report
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          MINIFIED_FILE="sonar-report-minified-${TIMESTAMP}.json"
          
          # Ensure output has the exact structure expected by Azure Function
          # key, rule, severity, component are essential fields
          jq '{
            issues: [.issues[] | {
              key: (.key // ("issue-" + (.component // "" | split(":")[1] // "" | gsub("/"; "-")))),
              rule: .rule // "unknown-rule",
              severity: .severity // "MAJOR",
              component: .component // .file, 
              project: .project // "eshop",
              line: .line // 1,
              message: .message // "Unknown issue",
              type: .type // "CODE_SMELL"
            }],
            components: (.components // [] | map({key, path, qualifier}) | if length > 50 then .[0:50] else . end),
            total: .total
          }' sonar-report.json > $MINIFIED_FILE
          
          # Validate minified file structure
          echo "Validating minified report structure..."
          if ! jq -e '.issues' $MINIFIED_FILE > /dev/null; then
            echo "ERROR: Minified report is missing 'issues' array"
            exit 1
          fi
          
          echo "$MINIFIED_FILE" > minified_filename.txt
          echo "Minified report saved as $MINIFIED_FILE"
          echo "Contains $(jq '.issues | length' $MINIFIED_FILE) issues"
          
      - name: Upload Minified SonarQube Report to Azure Blob
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
        run: |
          MINIFIED_FILE=$(cat minified_filename.txt)

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="minified-upload-${TIMESTAMP}.json"
          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)
          FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"

          curl -s -S -f -X PUT "$FULL_URL" -H "x-ms-blob-type: BlockBlob" --data-binary @"$MINIFIED_FILE"

          echo "Minified SonarQube report $MINIFIED_FILE uploaded to Azure Blob as $FILENAME"

      - name: Create GPT-4 Prompt
        run: |
          echo 'You are a secure code reviewer with deep knowledge of software vulnerabilities. Given the following static analysis results from SonarQube (backend) and ESLint (frontend), perform the following tasks:

          1. Identify the top 10 most severe issues and explain why they are critical.
          2. Group issues by file/module and summarize their overall security and code quality state.
          3. Recommend specific refactoring or remediation actions for the top issues using secure coding best practices.
          4. Present your output in well-structured markdown, including:
            - A prioritized issue summary table
            - A per-module security assessment
            - Actionable recommendations' > prompt.txt      
      - name: Create input.json for GPT-4
        run: |
          MINIFIED_FILE=$(cat minified_filename.txt)
          
          # Create proper input format for Azure Function - it expects "report" object containing issues
          jq -n --slurpfile report "$MINIFIED_FILE" --rawfile prompt prompt.txt \
            '{
              prompt: $prompt, 
              report: $report[0]
            }' > input.json
            
          # Debug the input structure
          echo "Input JSON structure:"
          jq 'keys' input.json
          jq '.report | keys' input.json

      - name: Analyze Minified Report with GPT-4 via Azure Function
        env:
          AZURE_FUNCTION_URL: ${{ secrets.AZURE_FUNCTION_URL }}
        run: |
          MINIFIED_FILE=$(cat minified_filename.txt)
          echo "Using minified file: $MINIFIED_FILE"
          
          # Check if Azure Function URL is set
          if [ -z "$AZURE_FUNCTION_URL" ]; then
            echo "ERROR: AZURE_FUNCTION_URL is not set. Cannot proceed with GPT-4 analysis."
            echo "# GPT-4 Analysis Error: Missing Azure Function URL" > gpt4-summary.md
            exit 0
          fi
          
          # Validate the minified file exists
          if [ ! -f "$MINIFIED_FILE" ]; then
            echo "ERROR: Minified file $MINIFIED_FILE not found"
            echo "# GPT-4 Analysis Error: Minified report not found" > gpt4-summary.md
            exit 0
          fi
            # Input JSON was already created in the previous step
          echo "Using previously created input.json"
          
          # Verify input.json has the correct structure
          echo "Verifying input.json structure..."
          if ! jq -e '.report.issues' input.json > /dev/null; then
            echo "ERROR: input.json doesn't have the correct structure. Missing .report.issues field"
            echo "# GPT-4 Analysis Error: Invalid request payload format" > gpt4-summary.md
            exit 0
          fi

          
          # Verify input.json was created and is valid
          if [ ! -s input.json ] || ! jq empty input.json > /dev/null 2>&1; then
            echo "ERROR: Failed to create valid input.json"
            echo "# GPT-4 Analysis Error: Failed to create request payload" > gpt4-summary.md
            exit 0
          fi
            # Call the Azure Function with proper error handling
          echo "Calling Azure Function for analysis..."
          echo "Input JSON structure:"
          jq 'keys' input.json
          
          # Store the sample structure for debugging
          echo "First few issues from input:"
          jq '.report.issues[0:3]' input.json
            
          # Add debugging headers to see more info on errors
          HTTP_RESPONSE=$(curl -s -v -w "\n%{http_code}" -X POST "$AZURE_FUNCTION_URL" \
            -H "Content-Type: application/json" \
            -H "Accept: text/markdown" \
            --max-time 300 \
            --retry 3 \
            --retry-max-time 900 \
            --data-binary @input.json 2>&1)
          
          # Extract status code and body
          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed '$d')
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tail -n1)
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "$HTTP_BODY" > gpt4-summary.md
            echo "✅ GPT-4 summary written to gpt4-summary.md"
            ls -la gpt4-summary.md
          else
            echo "❌ Error calling Azure Function: HTTP status $HTTP_STATUS"
            echo "# GPT-4 Analysis Error" > gpt4-summary.md
            echo "" >> gpt4-summary.md
            echo "The analysis failed with HTTP status code $HTTP_STATUS" >> gpt4-summary.md
            echo "" >> gpt4-summary.md
            echo "Response:" >> gpt4-summary.md
            echo '```' >> gpt4-summary.md
            echo "$HTTP_BODY" >> gpt4-summary.md
            echo '```' >> gpt4-summary.md
          fi

      - name: Upload GPT-4 Summary to Azure Blob
        if: always()
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
        run: |
          if [ ! -f gpt4-summary.md ]; then
            echo "ERROR: gpt4-summary.md not found. Creating a minimal file."
            echo "# GPT-4 Analysis Could Not Be Generated" > gpt4-summary.md
            echo "" >> gpt4-summary.md
            echo "The GPT-4 analysis step encountered an error. Please check the workflow logs for details." >> gpt4-summary.md
          fi
          
          echo "Uploading GPT-4 summary to Azure Blob Storage..."
          echo "File exists check: $(ls -la gpt4-summary.md || echo 'File not found')"
          echo "File size: $(wc -c gpt4-summary.md || echo 'Cannot check size')"

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="gpt4-summary-${TIMESTAMP}.md"
          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)
          FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
          curl -s -S -f -X PUT "$FULL_URL" -H "x-ms-blob-type: BlockBlob" --data-binary @gpt4-summary.md
          echo "Uploaded GPT-4 summary to Azure Blob: $FILENAME"