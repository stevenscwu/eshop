name: SonarQube and GPT-4 Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Clean previous SonarQube cache
      run: rm -rf .sonarqube

    - name: Clean, Restore and Build
      run: |
        dotnet clean
        dotnet restore
        dotnet build --no-incremental

    - name: Begin SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin \
          /k:"eshop" \
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Build (required for analysis)
      run: dotnet build

    - name: End SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Upload SonarQube Report
      if: always()
      run: |
        mkdir -p artifacts
        cp .sonarqube/out/.sonar/report-task.txt artifacts/
      continue-on-error: true

    - name: Send SonarQube Report to GPT-4
      if: success() || failure()  # Run even if sonar fails
      env:
        GPT4_ENDPOINT: ${{ secrets.GPT4_ENDPOINT }}
        GPT4_API_KEY: ${{ secrets.GPT4_API_KEY }}
      run: |
        echo "Calling GPT-4 to analyze report..."
        curl -X POST "$GPT4_ENDPOINT" \
          -H "Authorization: Bearer $GPT4_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
                "role": "security expert",
                "prompt": "You are a security expert. Analyze the following SonarQube report for vulnerabilities, reduce false positives, and summarize the findings in plain English.",
                "report_path": "artifacts/report-task.txt"
              }'
