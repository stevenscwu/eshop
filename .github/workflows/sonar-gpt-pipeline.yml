# Security Analysis Pipeline with SonarQube + GPT-4 + Azure Blob Upload
name: Fullstack Security Analysis with SonarQube

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Install SonarScanner and jq
        run: |
          dotnet tool install --global dotnet-sonarscanner
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Begin SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet sonarscanner begin \
            /k:"eshop" \
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.host.url="${SONAR_HOST_URL}" \
            /d:sonar.verbose=true \
            /d:sonar.exclusions="**/obj/**,**/bin/**,**/*.json,**/BlazorAdmin/**,infra/core/database/sqlserver/**,infra/core/security/keyvault.bicep,infra/core/host/appservice.bicep"

      - name: Clean, Restore and Build
        run: |
          # Explicitly specify solution file to avoid "more than one project" error
          dotnet clean eShopOnWeb.sln
          dotnet restore eShopOnWeb.sln
          dotnet build eShopOnWeb.sln --no-incremental

      - name: End SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"

      - name: Wait for SonarQube to finalize
        run: sleep 60

      - name: Download SonarQube Issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="eshop"
          AUTH_HEADER="Authorization: Basic $(echo -n "${SONAR_TOKEN}:" | base64)"
          HTTP_STATUS=$(curl -s -o sonar-report.json -w "%{http_code}" -H "$AUTH_HEADER" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&ps=500")
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "ERROR: SonarQube API returned HTTP status $HTTP_STATUS"
            cat sonar-report.json
            exit 1
          fi

      - name: Verify SonarQube Report Content
        run: |
          if [ ! -s sonar-report.json ] || ! jq empty sonar-report.json > /dev/null 2>&1; then
            echo "WARNING: SonarQube report is empty or not valid JSON"
            echo '{"issues":[],"components":[],"total":0}' > sonar-report.json
            echo "Created empty report template"
          fi
          
          # Log report information for diagnostics
          ISSUE_COUNT=$(jq '.issues | length' sonar-report.json)
          COMPONENT_COUNT=$(jq '.components | length' sonar-report.json)
          TOTAL_COUNT=$(jq '.total' sonar-report.json)
          echo "SonarQube report contains: $ISSUE_COUNT issues, $COMPONENT_COUNT components, $TOTAL_COUNT total reported issues"
          
          # Check for empty/incomplete report
          if [ "$ISSUE_COUNT" -eq 0 ]; then
            echo "WARNING: No issues found in SonarQube report. This might cause problems with the GPT analysis."
          fi

      - name: Upload SonarQube Raw Report to Azure Blob
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
        run: |
          jq '.' sonar-report.json > sonar-report-pretty.json
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="sonar-report-${TIMESTAMP}.json"
          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)
          FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
          curl -s -S -f -X PUT "$FULL_URL" -H "x-ms-blob-type: BlockBlob" --data-binary @sonar-report-pretty.json
          
          FOLDER_DATE=$(date +%Y%m%d)
          mkdir -p "report/${FOLDER_DATE}"                  
          cp sonar-report-pretty.json "report/${FOLDER_DATE}/${FILENAME}"
          echo "SonarQube report saved to report/${FOLDER_DATE}/${FILENAME}"

      - name: Minify SonarQube JSON Report
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          MINIFIED_FILE="sonar-report-minified-${TIMESTAMP}.json"
          jq '{
            issues: [.issues[] | {
              message,
              rule,
              line,
              file: .component
            }],
            total: .total
          }' sonar-report-pretty.json > $MINIFIED_FILE
          echo "$MINIFIED_FILE" > minified_filename.txt
          echo "Minified report saved as $MINIFIED_FILE"
      - name: Upload Minified SonarQube Report to Azure Blob
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
        run: |
          MINIFIED_FILE=$(cat minified_filename.txt)

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="minified-upload-${TIMESTAMP}.json"
          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)
          FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"

          curl -s -S -f -X PUT "$FULL_URL" -H "x-ms-blob-type: BlockBlob" --data-binary @"$MINIFIED_FILE"

          echo "Minified SonarQube report $MINIFIED_FILE uploaded to Azure Blob as $FILENAME"


      - name: Analyze Minified Report with GPT-4 via Azure Function
        env:
          AZURE_FUNCTION_URL: ${{ secrets.AZURE_FUNCTION_URL }}
        run: |
          MINIFIED_FILE=$(cat minified_filename.txt)

          cat << 'EOF' > prompt.txt
          You are a secure code reviewer with deep knowledge of software vulnerabilities. Given the following static analysis results from SonarQube (backend) and ESLint (frontend), perform the following tasks:

          1. Identify the top 10 most severe issues and explain why they are critical.
          2. Group issues by file/module and summarize their overall security and code quality state.
          3. Recommend specific refactoring or remediation actions for the top issues using secure coding best practices.
          4. Present your output in well-structured markdown, including:
            - A prioritized issue summary table
            - A per-module security assessment
            - Actionable recommendations
          EOF

          jq -n --slurpfile report "$MINIFIED_FILE" --rawfile prompt prompt.txt '{prompt: $prompt, report: $report[0]}' > input.json

          curl -s -S -X POST "$AZURE_FUNCTION_URL" \
            -H "Content-Type: application/json" \
            --data-binary @input.json > gpt4-summary.md

          echo "GPT-4 summary written to gpt4-summary.md"


          # Merge prompt and minified JSON into a request body
          jq -n --slurpfile report sonar-report-minified.json \
                --rawfile prompt prompt.txt \
                '{prompt: $prompt, report: $report[0]}' > input.json

          # Send request to Azure Function with GPT-4
          curl -X POST "$AZURE_FUNCTION_URL" \
            -H "Content-Type: application/json" \
            --data-binary @input.json > gpt4-summary.md

          echo "GPT-4 summary written to gpt4-summary.md"

      - name: Upload GPT-4 Summary to Azure Blob
        env:
          AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}
        run: |
          if [ ! -f gpt4-summary.md ]; then
            echo "ERROR: gpt4-summary.md not found. Ensure the GPT-4 analysis step completed successfully."
            exit 1
          fi
          echo "Uploading GPT-4 summary to Azure Blob Storage..."

          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          FILENAME="gpt4-summary-${TIMESTAMP}.md"
          SAS_URL="${AZURE_BLOB_SAS_URL}"
          BASE_URL=$(echo "$SAS_URL" | cut -d'?' -f1)
          SAS_TOKEN=$(echo "$SAS_URL" | cut -d'?' -f2-)
          FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
          curl -s -S -f -X PUT "$FULL_URL" -H "x-ms-blob-type: BlockBlob" --data-binary @gpt4-summary.md
          echo "Uploaded GPT-4 summary to Azure Blob: $FILENAME"
