name: Fullstack Security Analysis with SonarQube + GPT-4 + Azure Blob Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarQube Scan
      run: |
        dotnet sonarscanner begin \
          /k:"eshop-web-dotnet8" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
          /d:sonar.verbose=true \
          /d:sonar.exclusions="**/obj/**,**/bin/**,**/*.json,**/BlazorAdmin/**"

    - name: Clean, Restore and Build
      run: |
        dotnet clean eShopOnWeb.sln
        dotnet restore eShopOnWeb.sln
        dotnet build eShopOnWeb.sln --no-incremental

    - name: End SonarQube Scan
      run: |
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Wait for SonarQube to finalize
      run: sleep 30

    - name: Download SonarQube Issues
      run: |
        curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=eshop-web-dotnet8&ps=500" \
          -o sonar-report.json

    - name: Verify SonarQube Report Content
      run: |
        echo "Checking SonarQube report content..."
        if [ ! -s sonar-report.json ]; then
          echo "ERROR: SonarQube report is empty"
          exit 1
        fi
        echo "Report structure:"
        jq 'keys' sonar-report.json || echo "Failed to parse JSON report"
        
    - name: Upload SonarQube Raw Report to Azure Blob
      run: |
        echo "Uploading SonarQube report to Azure Blob..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FILENAME="sonar-report-${TIMESTAMP}.json"
        BASE_URL="${AZURE_BLOB_SAS_URL%%\?*}"
        SAS_TOKEN="${AZURE_BLOB_SAS_URL#*\?}"
        FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
        curl -v -X PUT "$FULL_URL" \
          -H "x-ms-blob-type: BlockBlob" \
          --data-binary @sonar-report.json
          
        echo "SonarQube report uploaded: $FILENAME"
      env:
        AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}

    - name: Upload GPT Function Configuration
      run: |
        echo "Checking GPT function configuration..."
        echo "{\"endpoint\": \"${{ secrets.GPT_FUNCTION_ENDPOINT }}\"}" > gpt-config.json
        
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FILENAME="gpt-config-${TIMESTAMP}.json"
        BASE_URL="${AZURE_BLOB_SAS_URL%%\?*}"
        SAS_TOKEN="${AZURE_BLOB_SAS_URL#*\?}"
        FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
        curl -v -X PUT "$FULL_URL" \
          -H "x-ms-blob-type: BlockBlob" \
          --data-binary @gpt-config.json
          
        echo "GPT config info uploaded: $FILENAME"
      env:
        AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}

    - name: Combine GPT Prompt with Report
      run: |
        PROMPT_TEXT="You are a senior security analyst. Analyze this SonarQube issue report. Group similar issues, reduce false positives, highlight critical risks, and provide remediation advice."

        if jq -e '.issues' sonar-report.json > /dev/null 2>&1; then
          ISSUES_JSON=$(jq -c '.issues' sonar-report.json)
        else
          ISSUES_JSON="[]"
        fi

        # Ensure TOTAL_JSON is a valid number, defaulting to 0 if jq fails or field is missing/not a number.
        TOTAL_JSON=$(jq -r '.total // 0' sonar-report.json)
        if ! [[ "$TOTAL_JSON" =~ ^[0-9]+$ ]]; then
            TOTAL_JSON="0"
        fi
        
        # Ensure COMPONENTS_JSON is a valid array, defaulting to [] if jq fails or field is missing/not an array.
        COMPONENTS_JSON=$(jq -c '.components // []' sonar-report.json)
        if ! echo "$COMPONENTS_JSON" | jq -e 'type == "array"' > /dev/null 2>&1; then
            COMPONENTS_JSON="[]"
        fi

        # Construct the JSON using jq to ensure validity
        jq -n \\
          --arg prompt_text "$PROMPT_TEXT" \\
          --argjson issues_json "$ISSUES_JSON" \\
          --argjson total_json "$TOTAL_JSON" \\
          --argjson components_json "$COMPONENTS_JSON" \\
          '{prompt: $prompt_text, issues: $issues_json, total: $total_json, components: $components_json}' > gpt-payload.json

        # Validate the generated payload
        if jq -e . gpt-payload.json > /dev/null 2>&1; then
          echo "gpt-payload.json is valid JSON."
          echo "Preview of GPT payload structure:"
          jq '.' gpt-payload.json
        else
          echo "ERROR: gpt-payload.json is NOT valid JSON."
          cat gpt-payload.json # Print the malformed content
          exit 1 # Fail the pipeline if payload is invalid
        fi
        
        # Upload the payload for debugging
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FILENAME="gpt-payload-${TIMESTAMP}.json"
        BASE_URL="${AZURE_BLOB_SAS_URL%%\\?*}"
        SAS_TOKEN="${AZURE_BLOB_SAS_URL#*\\?}"
        FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
        curl -v -X PUT "$FULL_URL" \\
          -H "x-ms-blob-type: BlockBlob" \\
          --data-binary @gpt-payload.json
        
        echo "GPT payload uploaded: $FILENAME"
      env:
        AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}

    - name: Call GPT-4 and Save Summary
      run: |
        echo "Calling GPT-4 to analyze SonarQube report..."
        RESPONSE=$(curl -v -X POST "${{ secrets.GPT_FUNCTION_ENDPOINT }}" \
          -H "Content-Type: application/json" \
          --data-binary @gpt-payload.json 2>&1)
        
        # Save full response including headers for debugging
        echo "$RESPONSE" > gpt-full-response.txt
        
        # Upload the full response for debugging
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FILENAME="gpt-full-response-${TIMESTAMP}.txt"
        BASE_URL="${AZURE_BLOB_SAS_URL%%\?*}"
        SAS_TOKEN="${AZURE_BLOB_SAS_URL#*\?}"
        FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
        curl -v -X PUT "$FULL_URL" \
          -H "x-ms-blob-type: BlockBlob" \
          --data-binary @gpt-full-response.txt
          
        # Extract just the response body for the summary
        grep -v "^[<>]" gpt-full-response.txt | grep -v "^{" | grep -v "^}" > gpt-summary.md
          
        # Check if we got a valid response
        if [ ! -s gpt-summary.md ]; then
          echo "ERROR: Empty response from GPT-4 API"
          echo "# GPT-4 Analysis Failed\n\nThe GPT-4 API returned an empty response. Please check the full response log for details." > gpt-summary.md
        else
          echo "Response length: $(wc -c < gpt-summary.md) bytes"
          echo "Response preview:"
          head -n 5 gpt-summary.md
        fi
      env:
        AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}

    - name: Upload GPT-4 Summary to Azure Blob Storage
      run: |
        echo "Checking summary file before upload..."
        if [ ! -s gpt-summary.md ]; then
          echo "WARNING: GPT summary file is empty, creating a placeholder message"
          echo "# SonarQube Analysis Summary\n\nNo issues found in the SonarQube report or analysis failed.\nPlease check the pipeline logs for more details." > gpt-summary.md
        fi
        
        echo "Uploading GPT-4 summary to Azure Blob..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FILENAME="gpt-summary-${TIMESTAMP}.md"
        
        # Parse SAS URL safely
        BASE_URL="${AZURE_BLOB_SAS_URL%%\?*}"
        SAS_TOKEN="${AZURE_BLOB_SAS_URL#*\?}"
        FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
        
        # Upload with verbose output
        curl -v -X PUT "$FULL_URL" \
          -H "x-ms-blob-type: BlockBlob" \
          --data-binary @gpt-summary.md
          
        echo "Upload completed for $FILENAME"
      env:
        AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}