name: Fullstack Security Analysis with SonarQube + GPT-4 + Azure Blob Upload

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarQube Scan
      run: |
        dotnet sonarscanner begin \
          /k:"eshop-web-dotnet8" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" \
          /d:sonar.verbose=true \
          /d:sonar.exclusions="**/obj/**,**/bin/**,**/*.json,**/BlazorAdmin/**"

    - name: Clean, Restore and Build
      run: |
        dotnet clean eShopOnWeb.sln
        dotnet restore eShopOnWeb.sln
        dotnet build eShopOnWeb.sln --no-incremental

    - name: End SonarQube Scan
      run: |
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Wait for SonarQube to finalize
      run: sleep 30

    - name: Download SonarQube Issues
      run: |
        curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
          "${{ secrets.SONAR_HOST_URL }}/api/issues/search?componentKeys=eshop-web-dotnet8&ps=500" \
          -o sonar-report.json
          
    - name: Check SonarQube Report Content
      run: |
        echo "Checking SonarQube report content..."
        if [ ! -s sonar-report.json ]; then
          echo "ERROR: SonarQube report is empty"
          exit 1
        fi
        echo "Report structure:"
        jq 'keys' sonar-report.json || echo "Failed to parse JSON report"

    - name: Combine GPT Prompt with Report
      run: |
        # Check if issues field exists in report, if not extract it from components or create an empty array
        if jq -e '.issues' sonar-report.json > /dev/null 2>&1; then
          echo "Issues field found in report"
          ISSUES=$(jq -c '.issues' sonar-report.json)
        else
          echo "Issues field not found, will use empty array"
          ISSUES="[]"
        fi
        
        # Create a well-structured payload for GPT
        echo "{
          \"prompt\": \"You are a senior security analyst. Analyze this SonarQube issue report. Group similar issues, reduce false positives, highlight critical risks, and provide remediation advice.\", 
          \"issues\": $ISSUES,
          \"total\": $(jq '.total // 0' sonar-report.json),
          \"components\": $(jq '.components // []' sonar-report.json)
        }" > gpt-payload.json
        
        echo "Preview of GPT payload structure:"
        jq 'keys' gpt-payload.json

    - name: Call GPT-4 and Save Summary
      run: |
        echo "Calling GPT-4 to analyze SonarQube report..."
        RESPONSE=$(curl -s -X POST "${{ secrets.GPT_FUNCTION_ENDPOINT }}" \
          -H "Content-Type: application/json" \
          --data-binary @gpt-payload.json)
          
        # Check if we got a valid response
        if [ -z "$RESPONSE" ]; then
          echo "ERROR: Empty response from GPT-4 API"
          exit 1
        fi
        
        # Save response and print length for debugging
        echo "$RESPONSE" > gpt-summary.md
        echo "Response length: $(wc -c < gpt-summary.md) bytes"
        echo "Response preview:"
        head -n 5 gpt-summary.md

    - name: Upload GPT-4 Summary to Azure Blob Storage
      run: |
        echo "Checking summary file before upload..."
        if [ ! -s gpt-summary.md ]; then
          echo "WARNING: GPT summary file is empty, creating a placeholder message"
          echo "# SonarQube Analysis Summary\n\nNo issues found in the SonarQube report or analysis failed.\nPlease check the pipeline logs for more details." > gpt-summary.md
        fi
        
        echo "Uploading GPT-4 summary to Azure Blob..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        FILENAME="gpt-summary-${TIMESTAMP}.md"
        
        # Parse SAS URL safely
        BASE_URL="${AZURE_BLOB_SAS_URL%%\?*}"
        SAS_TOKEN="${AZURE_BLOB_SAS_URL#*\?}"
        FULL_URL="${BASE_URL}/${FILENAME}?${SAS_TOKEN}"
        
        # Upload with verbose output
        curl -v -X PUT "$FULL_URL" \
          -H "x-ms-blob-type: BlockBlob" \
          --data-binary @gpt-summary.md
          
        echo "Upload completed for $FILENAME"
      env:
        AZURE_BLOB_SAS_URL: ${{ secrets.AZURE_BLOB_SAS_URL }}